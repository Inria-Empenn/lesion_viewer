/* DO NOT EDIT (start) -- papayaLoadableImages is generated by papaya-builder and is here for debugging purposes only */
// var papayaLoadableImages = [
//     {nicename: "Sample Image", name: "sample_image", encode: "sample_image"},
//     {nicename: "Atlas", name: "Talairach_labels_1mm", encode: "Talairach_labels_1mm", hide:true}
// ];
/* DO NOT EDIT (end) */

let validation = localStorage.getItem('validation');
validation = validation != null ? JSON.parse(validation) : {};
papaya.Container.atlasWorldSpace = false
var params = [];

params["images"] = [];

// lesions = ['039_12', '039_3', '040_7', '046_10', '061_8', '061_9', '062_31', '066_13', '066_15', '066_19', '066_22', '066_25', '066_26', '066_27', '066_29', '066_36', '066_40', '066_43', '066_46', '066_48', '066_5', '066_8', '074_7', '083_1', '095_22', '095_24', '095_5', '095_9']

let current_image_index = 0;

let image_archive = null;
let lesions = [];
let toggle_buttons = [];

let create_toggle_button = (button_name, image_index)=> {
    let container = document.getElementById('toggle-visibility-buttons')
    let toggle_button = document.createElement("button");
    toggle_button.innerHTML = "Hide " + button_name;
    container.appendChild(toggle_button);
    toggle_button.setAttribute('data-visible', 'true')
    toggle_button.addEventListener('click', ()=> {
        let visible = toggle_button.getAttribute('data-visible')
        if(visible == 'true') {
            papaya.Container.hideImage(0, image_index)
            toggle_button.innerHTML = "Show " + button_name
            toggle_button.setAttribute('data-visible', 'false')
        } else {
            papaya.Container.showImage(0, image_index)
            toggle_button.innerHTML = "Hide " + button_name
            toggle_button.setAttribute('data-visible', 'true')
        }
    })
    toggle_buttons.push(toggle_button)
}

let loaded_images = []

let load_image_viewer = (images, image_parameters, lesion, lesion_index)=> {
    // console.log("the content is", data64);
    for(let li of loaded_images) {
        delete window[li]
    }

    params = {}
    // params['files'] = images
    params['encodedImages'] = []
    // params['binaryImages'] = images

    for(let tb of toggle_buttons) {
        tb.remove();
    }
    let image_index = 0;
    for(let image_parameter of image_parameters) {
        // params['t0'] = {"min": 0, "max": 1, "lut": "Red Overlay"};
        // image_name = 'lesion_viewer_' + key
        let key = image_parameter['file_name']
        let parameters = image_parameter['parameters']
        let image_name = key.replace('/', '_').replace('.nii.gz', '')
        params['encodedImages'].push(image_name)
        window[image_name] = images[image_index]
        loaded_images.push[image_name]
        if(parameters['max'] == 1) {
            parameters['max'] = 2
        }
        params[image_name] = parameters
        // params[key] = image_parameters[key]
        create_toggle_button(key, image_index++)
    }
    params['worldSpace'] = false
    loc = lesion['location']
    // params['coordinate'] = [loc[2], loc[1], loc[0]]
    params['coordinate'] = [-loc[0], -loc[1], loc[2]]
    // papayaContainers[0].viewer.gotoCoordinate({x:1,y:-24,z:5})
    params['smoothDisplay'] = false

    let description = document.getElementById('description')
    description.innerText = `${lesion['name']} - ${lesion_index + 1}/${lesions.length}`

    papaya.Container.resetViewer(0, params);
}

// let load_image = (i)=> {
//     params = {}
//     params['encodedImages'] = image_archive
//     papaya.Container.resetViewer(0, params);
// }

let load_image = (i)=> {
    current_image_index = i;
    if(current_image_index < 0) {
        current_image_index = lesions.length-1;
    }
    if(current_image_index >= lesions.length) {
        current_image_index = 0;
    }

    let lesion = lesions[current_image_index]
    let info = validation[lesion['name']];
    let comment = document.getElementById('comment');
    let valid = document.getElementById('valid');
    comment.value = info ? info['comment'] : ''
    valid.checked = info ? info['valid'] : false 

    // // papaya.Container.resetViewer(0);
    // for(let i=0 ; i<4 ; i++) {
    //     setTimeout(()=>{ papaya.Container.removeImage(0, 0); }, i*1000)
    // }
    // // setTimeout(()=>{ papaya.Container.addImage(0, 'data/lesion_viewer/' + lesions[current_image_index] + '_t1.nii.gz',  {"min": 0, "max": 1, "lut": "Grayscale"}); }, 1000)

    // setTimeout(()=>{ papaya.Container.addImage(0, 'data/lesion_viewer/' + lesions[current_image_index] + '_t0.nii.gz',  {"min": 0, "max": 1, "lut": "Grayscale"}); }, 5000)
    // setTimeout(()=>{ papaya.Container.addImage(0, 'data/lesion_viewer/' + lesions[current_image_index] + '_t1.nii.gz',  {"min": 0, "max": 1, "lut": "Grayscale"}); }, 6000)
    // setTimeout(()=>{ papaya.Container.addImage(0, 'data/lesion_viewer/' + lesions[current_image_index] + '_fixed.nii.gz',  {"min": 0, "max": 10, "lut": "Red Overlay"}); }, 7000)
    // setTimeout(()=>{ papaya.Container.addImage(0, 'data/lesion_viewer/' + lesions[current_image_index] + '_original.nii.gz',  {"min": 0, "max": 1, "lut": "Blue Overlay"}); }, 8000)
    
    // for(let key in params) {
    //     delete params[key];
    // }
    // params = {}
    // params['images'] = ['data/lesion_viewer/' + lesions[current_image_index] + '_t0.nii.gz',
    //                     'data/lesion_viewer/' + lesions[current_image_index] + '_t1.nii.gz',
    //                     'data/lesion_viewer/' + lesions[current_image_index] + '_fixed.nii.gz',
    //                     'data/lesion_viewer/' + lesions[current_image_index] + '_original.nii.gz']
    // params[lesions[current_image_index] + '_t0.nii.gz'] = {"min": 0, "max": 1, "lut": "Grayscale"};
    // params[lesions[current_image_index] + '_t1.nii.gz'] = {"min": 0, "max": 1, "lut": "Grayscale"};
    // params[lesions[current_image_index] + '_fixed.nii.gz'] = {"min": 0, "max": 2, "lut": "Red Overlay"};
    // params['files'] = image_archive.files.slice(4*current_image_index, 4*current_image_index+4);
    // papaya.Container.resetViewer(0, params);
    let image_descriptions = lesion['images']

    let promises = []
    let image_parameters = []
    
    for(let image_description of image_descriptions) {
        let file_name = image_description['file']
        // let file_name_parts = file_name.split('_')
        // let patient = file_name_parts[0]
        // let suffix = file_name_parts[1]
        for(let f in image_archive.files) {
            if(f.endsWith(file_name)) {
            // if(f.endsWith(suffix) && f.indexOf(patient)>=0) {
                file_name = f
                break
            }
        }
        promises.push(image_archive.file(file_name).async("base64"))
        // promises.push(image_archive.file(file_name).async("uint8array"))
        // image_parameters[image_description['file']] = image_description['parameters']
        image_parameters.push({'file_name': file_name, 'parameters': image_description['parameters'] })
        
    }

    let description = document.getElementById('description')
    description.innerText = 'loading ' + lesion['name'] + '...'
    let lesion_index = current_image_index
    Promise.all(promises).then((images)=>load_image_viewer(images, image_parameters, lesion, lesion_index))
}

let save_validation = ()=> {
    localStorage.setItem(JSON.stringify(validation))
}

document.addEventListener("DOMContentLoaded", function(event) {
    
    let load = document.getElementById('load')
    
    load.onchange = function() {
        var zip = new JSZip();
        zip.loadAsync( this.files[0] /* = file blob */)
            .then(function(local_zip) {
                image_archive = local_zip;
                for(let file in image_archive.files) {
                    if(file.endsWith('lesions.json')) {
                        return image_archive.file(file).async('text')
                    }
                }

            }).then(function(result) {
                if(result){
                    lesions = JSON.parse(result);
                } else {
                    console.log('lesions.json not found')
                }

                let viewer_container = document.getElementById('viewer-container')
                viewer_container.classList.remove('hide')
                load.classList.add('hide')
                if(lesions.length > 0){
                    load_image(0)
                }
            })
    };

    let comment = document.getElementById('comment');
    comment.addEventListener('change', ()=> {
        let lesion_name = lesions[current_image_index]['name']
        let info = validation[lesion_name];
        if(info != null) {
            validation[lesion_name]['comment'] = comment.value
        } else {
            validation[lesion_name] = {'comment': comment.value, 'valid': null }
        }
    })

    let valid = document.getElementById('valid');
    valid.addEventListener('change', ()=> {
        let lesion_name = lesions[current_image_index]['name']
        let info = validation[lesion_name];
        if(info != null) {
            validation[lesion_name]['valid'] = valid.checked
        } else {
            validation[lesion_name] = {'valid': valid.checked, 'comment': '' }
        }
    })

    let save = document.getElementById('save');
    save.addEventListener('click', ()=> {
        validation_string = JSON.stringify(validation)

        var data_string = "data:text/json;charset=utf-8," + encodeURIComponent(validation_string);
        var download_node = document.createElement('a');
        download_node.setAttribute("href",     data_string);
        download_node.setAttribute("download", "validation.json");
        document.body.appendChild(download_node); // required for firefox
        download_node.click();
        download_node.remove();
    })
    
    let prev_button = document.getElementById('prev')
    prev_button.addEventListener('click', ()=> {
        load_image(current_image_index - 1);
    })

    let next_button = document.getElementById('next')
    next_button.addEventListener('click', ()=> {
        load_image(current_image_index + 1);
    })

});